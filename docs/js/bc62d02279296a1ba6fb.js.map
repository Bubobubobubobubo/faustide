{"version":3,"sources":["webpack:///./src/monaco-faust/Faust2Doc.ts","webpack:///./src/monaco-faust/Faust2MD.ts","webpack:///./src/monaco-faust/FaustLang.ts"],"names":["Faust2Doc","matchLibrary","line","libs","exps","match","RegExp","REGEX_DEF_LIB","forEach","exp","matched","push","namespace","fileName","matchImport","imps","REGEX_DEF_IMP","matchFuncName","str","REGEX_FUNC_NAME","getAllConditions","getCondition","condsIn","conds","cond","regexp","REGEX_FUNC_NAME_COND","result","exec","found","index","subConds","splice","filter","el","map","replace","before","substring","after","length","subCond","parse","getFile","depthIn","pathIn","docIn","depth","strIn","doc","path","inComment","idt","curName","strBuffer","lines","split","i","Faust2MD","isComment","name","concat","join","j","lib","imp","indentation","endC","matchEndComment","endS","matchEndSection","endT","matchEndTitle","outdent","c","matchBeginComment","s","matchBeginSection","t","matchBeginTitle","frontMatter","Date","toLocaleDateString","substr","REGEX_BEG_TITLE","REGEX_END_TITLE","REGEX_BEG_SECTION","REGEX_END_SECTION","REGEX_BEG_COMMENT","REGEX_END_COMMENT","REGEX_INDENT","REGEX_COMMENT","optionsIn","options","tabsize","code","front","strOut","language","id","extensions","mimetypes","config","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","theme","base","inherit","rules","token","foreground","colors","faustKeywords","faustFunctions","faust","fs","readFile","encoding","libPath","fetch","res","text","matchDocKey","model","position","line$","lineNumber","getLineContent","wordAtPosition","getWordAtPosition","column$","startColumn","word","prefixes","prefixWord","Position","nameArray","e","range","Range","endColumn","getProviders","libDocs","primDocs","console","error","faustLib","Object","keys","hoverProvider","provideHover","prefix","slice","pop","contents","value","faustDocURL","docSections","toLowerCase","tokensProvider","defaultToken","tokenPostfix","faustCompOperators","operators","symbols","escapes","tokenizer","root","cases","include","next","comment","string","whitespace","completionItemProvider","provideCompletionItems","suggestions","label","kind","languages","CompletionItemKind","Text","insertText","docs"],"mappings":"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","file":"js/bc62d02279296a1ba6fb.js","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { Faust2MD } from \"./Faust2MD\";\n/*\nRetrive faust2md doc by parsing .dsp file\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\n--------------------------------------------------------\n*/\nexport type TFaustDocs = { [key: string]: TFaustDoc };\nexport type TFaustDoc = { path: string[]; name: string; doc: string };\n/**\n *\n * @class Faust2Doc\n */\nexport class Faust2Doc {\n    private static readonly REGEX_DEF_LIB = /\\b(\\w+)\\s*=\\s*library\\(\"(.+)\"\\);/;\n    private static readonly REGEX_DEF_IMP = /\\bimport\\(\"(.+)\"\\);/;\n    private static readonly REGEX_FUNC_NAME = /`.*?([\\w[\\]|]+)`/;\n    private static readonly REGEX_FUNC_NAME_COND = /\\[(.+?)(\\|.+?)*?]/;\n    /**\n     * Retrieve a library definition\n     *\n     * @static\n     * @param {string} line\n     * @returns {{ namespace: string, fileName: string }[]}\n     * @memberof Faust2Doc\n     */\n    static matchLibrary(line: string): { namespace: string; fileName: string }[] {\n        const libs = [] as { namespace: string; fileName: string }[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_LIB, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_LIB);\n                if (matched) libs.push({ namespace: matched[1], fileName: matched[2] });\n            });\n        }\n        return libs;\n    }\n    /**\n     * Retrieve an import expression\n     *\n     * @static\n     * @param {string} line\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static matchImport(line: string): string[] {\n        const imps = [] as string[];\n        const exps = line.match(new RegExp(this.REGEX_DEF_IMP, \"g\"));\n        if (exps) {\n            exps.forEach((exp) => {\n                const matched = exp.match(this.REGEX_DEF_IMP);\n                if (matched) imps.push(matched[1]);\n            });\n        }\n        return imps;\n    }\n    /**\n     * Retrieve true function name from string in comments\n     * `(si.)bus`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchFuncName(str: string): string {\n        const matched = str.match(this.REGEX_FUNC_NAME);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Get all conditions in func name like `[third|half]_octave_[analyzer|filterbank][n]`\n     *\n     * @static\n     * @param {string} str\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    static getAllConditions(str: string): string[] {\n        return this.getCondition([str]);\n    }\n    /**\n     * getAllConditions Recursive body\n     *\n     * @static\n     * @param {string[]} [condsIn]\n     * @param {RegExp} [regexp]\n     * @returns {string[]}\n     * @memberof Faust2Doc\n     */\n    private static getCondition(condsIn?: string[]): string[] {\n        const conds = [] as string[];\n        condsIn.forEach((cond) => {\n            const regexp = new RegExp(this.REGEX_FUNC_NAME_COND, \"g\");\n            const result = regexp.exec(cond);\n            if (!result) return;\n            const found = result[0];\n            const index = result.index;\n            const subConds = result.splice(1).filter(el => typeof el === \"string\").map(str => str.replace(/^\\|/, \"\"));\n            const before = cond.substring(0, index);\n            const after = cond.substring(index + found.length);\n            if (subConds.length === 1) {\n                conds.push(before + after);\n                conds.push(before + subConds + after);\n            } else {\n                subConds.forEach(subCond => conds.push(before + subCond + after));\n            }\n        });\n        return conds.length ? this.getCondition(conds) : condsIn;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} fileName fileName to be fetch using getFile\n     * @param {string} getFile callback used for import and library expressions\n     * @param {string[]} [depthIn] current Depth, stop when 0;\n     * @param {string[]} [pathIn] path of current namespace\n     * @param {string} [docIn] recursive accum object for output\n     * @returns {Promise<TFaustDocs>}\n     * @memberof Faust2MD\n     */\n    static async parse(fileName: string, getFile: (fileName: string) => Promise<string>, depthIn?: number, pathIn?: string[], docIn?: TFaustDocs): Promise<TFaustDocs> {\n        if (depthIn === 0) return docIn;\n        const depth = depthIn || 2;\n        const strIn = await getFile(fileName);\n        const doc: TFaustDocs = docIn || {};\n        const path = pathIn || [];\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        let curName = \"\"; // current function name\n        let strBuffer = \"\"; // current function doc\n        const lines = strIn.split(\"\\n\");\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            if (!line) continue; // empty line\n            if (!Faust2MD.isComment(line)) {\n                if (inComment) { // we are closing a md-comment\n                    inComment = false;\n                    if (curName) this.getAllConditions(curName).forEach(name => doc[path.concat(name).join(\".\")] = { name: curName, path: [...path], doc: strBuffer });\n                    curName = \"\";\n                    strBuffer = \"\";\n                }\n                const libs = this.matchLibrary(line);\n                const imps = this.matchImport(line);\n                for (let j = 0; j < libs.length; j++) {\n                    const lib = libs[j];\n                    await this.parse(lib.fileName, getFile, depth - 1, [...path, lib.namespace], doc);\n                }\n                for (let j = 0; j < imps.length; j++) {\n                    const imp = imps[j];\n                    await this.parse(imp, getFile, depth - 1, path, doc);\n                }\n                continue;\n            }\n            if (inComment) { // we are in a md-comment (not first line)\n                if (idt === 0) idt = Faust2MD.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: Faust2MD.matchEndComment(line), endS: Faust2MD.matchEndSection(line), endT: Faust2MD.matchEndTitle(line) };\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strBuffer += Faust2MD.outdent(line, idt) + \"\\n\";\n                if (endC) { // pop buffer\n                    if (curName) this.getAllConditions(curName).forEach(name => doc[path.concat(name).join(\".\")] = { name: curName, path: [...path], doc: strBuffer });\n                    curName = \"\";\n                    strBuffer = \"\";\n                }\n                continue;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: Faust2MD.matchBeginComment(line), s: Faust2MD.matchBeginSection(line), t: Faust2MD.matchBeginTitle(line) };\n            if (c) curName = this.matchFuncName(c);\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n                strBuffer = \"\";\n            }\n        }\n        return doc;\n    }\n}\n","/*\n\nUltra simple automatic documentation system for Faust.\nCreates a markdown file by extracting the comments from\na Faust file. The option -t n can be used to change the\ndefault (4) tab setting. The option -c can be used to\ninclude the Faust code itself into the generated doc.\nAnd the option -f can be used to include a YAML front\nmatter with the name of the file and the date.\n\nThe format of a title is :\n    //############# Title Name #################\n    //  markdown text....\n    //  markdown text....\n    //##########################################\n\nThe format of a section is :\n    //============== Section Name ==============\n    //  markdown text....\n    //  markdown text....\n    //==========================================\n\nThe format of a comment is :\n    //-------------- foo(x,y) ------------------\n    //  markdown text....\n    //  markdown text....\n    //------------------------------------------\neverything else is considered Faust code.\nThe translation is the following:\n  ## foo(x,y)\n    markdown text....\n    markdown text....\n--------------------------------------------------------\n*/\ntype Faust2MDOptions = { tabsize: number; code: boolean; front: boolean };\n/**\n * faust2md ts port\n *\n * @class Faust2MD\n */\nexport class Faust2MD {\n    private static readonly REGEX_BEG_TITLE = /^\\s*\\/\\/#{3,}\\s*([^#]*[^#\\s])\\s*#{3,}$/;\n    private static readonly REGEX_END_TITLE = /^\\s*((\\/\\/#{3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_SECTION = /^\\s*\\/\\/={3,}\\s*([^=]*[^=\\s])\\s*={3,}$/;\n    private static readonly REGEX_END_SECTION = /^\\s*((\\/\\/={3,})|(\\s*))$/;\n    private static readonly REGEX_BEG_COMMENT = /^\\s*\\/\\/-{3,}\\s*([^-]*[^=\\s])\\s*-{3,}$/;\n    private static readonly REGEX_END_COMMENT = /^\\s*((\\/\\/-{3,})|(\\s*))$/;\n    private static readonly REGEX_INDENT = /(^\\s*\\/\\/\\s*)[^\\s]/;\n    private static readonly REGEX_COMMENT = /^\\s*\\/\\//;\n    /**\n     * Print the front matter of the file\n     *\n     * @static\n     * @param {string} fileName\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static frontMatter(fileName: string): string {\n        return \"---\\n\"\n        + `file: ${fileName}\\n`\n        + `date: ${new Date().toLocaleDateString()}\\n`\n        + \"---\\n\";\n    }\n    /**\n     * Outdent a comment line by n characters in\n     * order to remove the prefix \"//   \"\n     *\n     * @static\n     * @param {string} line\n     * @param {number} idt\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static outdent(line: string, idt: number): string {\n        return line.length <= idt ? \"\\n\" : line.substr(idt);\n    }\n    /**\n     * Match the first line of a title\n     * of type \"//#### Title ####\"\n     * at least 3 # are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginTitle(line: string): string {\n        const matched = line.match(this.REGEX_BEG_TITLE);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a title\n     * of type \"//########\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndTitle(line: string): boolean {\n        const matched = line.match(this.REGEX_END_TITLE);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a section\n     * of type \"//==== Section ====\"\n     * at least 3 = are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginSection(line: string): string {\n        const matched = line.match(this.REGEX_BEG_SECTION);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a section\n     * of type \"//=======\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndSection(line: string): boolean {\n        const matched = line.match(this.REGEX_END_SECTION);\n        return !!matched;\n    }\n    /**\n     * Match the first line of a comment\n     * of type \"//--- foo(x,y) ----\"\n     * at least 3 - are needed\n     *\n     * @static\n     * @param {string} line\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static matchBeginComment(line: string): string {\n        const matched = line.match(this.REGEX_BEG_COMMENT);\n        return matched ? matched[1] : null;\n    }\n    /**\n     * Match the last line of a comment\n     * of type \"//-----------------\"\n     * or a blank line\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static matchEndComment(line: string): boolean {\n        const matched = line.match(this.REGEX_END_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Measure the indentation of a md-comment line\n     * that is the len of the prefix '//   '\n     *\n     * @static\n     * @param {string} line\n     * @returns {number}\n     * @memberof Faust2MD\n     */\n    static indentation(line: string): number {\n        const matched = line.match(this.REGEX_INDENT);\n        return matched ? matched[1].length : 0;\n    }\n    /**\n     * Indicates if a line is a comment\n     *\n     * @static\n     * @param {string} line\n     * @returns {boolean}\n     * @memberof Faust2MD\n     */\n    static isComment(line: string): boolean {\n        const matched = line.match(this.REGEX_COMMENT);\n        return !!matched;\n    }\n    /**\n     * Process the file\n     *\n     * @static\n     * @param {string} strIn\n     * @param {string} [fileName]\n     * @param {{ tabsize?: number, code?: boolean, front?: boolean }} [optionsIn]\n     * @returns {string}\n     * @memberof Faust2MD\n     */\n    static parse(strIn: string, fileName?: string, optionsIn?: { tabsize?: number; code?: boolean; front?: boolean }): string {\n        const options: Faust2MDOptions = { tabsize: 4, code: false, front: false, ...optionsIn };\n        let strOut = \"\";\n        let inComment = false; // false: in code; true: in md-comment\n        let idt = 0; // indentation retained to outdent comment lines\n        if (options.front && fileName) strOut += this.frontMatter(fileName);\n        strIn.split(\"\\n\").forEach((line) => {\n            if (!this.isComment(line)) {\n                if (inComment) { // we are closing a md-comment\n                    strOut += \"\\n\";\n                    inComment = false;\n                }\n                if (options.code) strOut += `\\t${line}\\n`;\n                return;\n            }\n            if (inComment) { // we are in a md-comment\n                if (idt === 0) idt = this.indentation(line); // we have to measure the indentation\n                // check end of md-comment\n                const { endC, endS, endT } = { endC: this.matchEndComment(line), endS: this.matchEndSection(line), endT: this.matchEndTitle(line) };\n                if (endC) strOut += \"\\n---\\n\\n\";\n                if (endC || endS || endT) inComment = false; // end of md-comment switch back to mode O\n                else strOut += this.outdent(line, idt) + \"\\n\";\n                return;\n            }\n            // check begin of md-comment\n            const { c, s, t } = { c: this.matchBeginComment(line), s: this.matchBeginSection(line), t: this.matchBeginTitle(line) };\n            if (c) strOut += `\\n### ${c}\\n`;\n            else if (s) strOut += `\\n## ${s}\\n`;\n            else if (t) strOut += `\\n# ${t}\\n`;\n            if (c || s || t) {\n                inComment = true;\n                idt = 0;\n            } else if (options.code) strOut += `\\t${line}\\n`;\n        });\n        return strOut;\n    }\n}\n","import { languages, editor, Position, Range } from \"monaco-editor/esm/vs/editor/editor.api\";\nimport { Faust } from \"faust2webaudio\";\nimport { Faust2Doc, TFaustDocs, TFaustDoc } from \"./Faust2Doc\";\n\nimport { docSections, faustDocURL } from \"../documentation\"; \n\nexport type FaustLanguageProviders = {\n    hoverProvider: languages.HoverProvider;\n    tokensProvider: languages.IMonarchLanguage;\n    completionItemProvider: languages.CompletionItemProvider;\n    docs: TFaustDocs;\n};\nexport const language: languages.ILanguageExtensionPoint = {\n    id: \"faust\",\n    extensions: [\"dsp\", \"lib\"],\n    mimetypes: [\"application/faust\"]\n};\nexport const config: languages.LanguageConfiguration = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\"/*\", \"*/\"]\n    },\n    brackets: [\n        [\"{\", \"}\"],\n        [\"[\", \"]\"],\n        [\"(\", \")\"]\n    ],\n    autoClosingPairs: [\n        { open: \"{\", close: \"}\" },\n        { open: \"[\", close: \"]\" },\n        { open: \"(\", close: \")\" },\n        { open: '\"', close: '\"', notIn: [\"string\"] },\n        { open: \"/*\", close: \"*/\", notIn: [\"string\"] }\n    ]\n};\nexport const theme: editor.IStandaloneThemeData = {\n    base: \"vs-dark\",\n    inherit: true,\n    rules: [\n        { token: \"faustFunctions\", foreground: \"DDDD99\" },\n        { token: \"faustKeywords\", foreground: \"4499CC\" },\n        { token: \"faustLib\", foreground: \"CCCCBB\" },\n        { token: \"faustCompOperators\", foreground: \"FFDDFF\" },\n        { token: \"identifier\", foreground: \"77CCFF\" }\n    ],\n    colors: null\n};\nconst faustKeywords = [\n    \"import\", \"component\", \"declare\", \"library\", \"environment\", \"int\", \"float\",\n    \"letrec\", \"with\", \"class\", \"process\", \"effect\", \"inputs\", \"outputs\"\n];\nconst faustFunctions = [\n    \"mem\", \"prefix\", \"rdtable\", \"rwtable\",\n    \"select2\", \"select3\", \"ffunction\", \"fconstant\", \"fvariable\",\n    \"route\", \"waveform\", \"soundfile\",\n    \"button\", \"checkbox\", \"vslider\", \"hslider\", \"nentry\",\n    \"vgroup\", \"hgroup\", \"tgroup\", \"vbargraph\", \"hbargraph\", \"attach\",\n    \"acos\", \"asin\", \"atan\", \"atan2\", \"cos\", \"sin\", \"tan\", \"exp\",\n    \"log\", \"log10\", \"pow\", \"sqrt\", \"abs\", \"min\", \"max\", \"fmod\",\n    \"remainder\", \"floor\", \"ceil\", \"rint\",\n    \"seq\", \"par\", \"sum\", \"prod\"\n];\nconst getFile = async (fileName: string, faust: Faust) => {\n    if (faust) return faust.fs.readFile(\"libraries/\" + fileName, { encoding: \"utf8\" }) as string;\n    const libPath = \"https://faustlibraries.grame.fr/libs/\";\n    const res = await fetch(libPath + fileName);\n    return res.text();\n};\ntype TMatchedFaustDoc = { nameArray: string[]; name: string; range: Range; doc: TFaustDoc };\n/**\n * Match an available doc key from monaco editor\n *\n * @param {TFaustDocs} doc\n * @param {editor.ITextModel} model\n * @param {Position} position\n * @returns {TMatchedFaustDoc} full: [...prefixes, name], range: a monaco range object, doc: a FaustDoc object\n */\nexport const matchDocKey = (doc: TFaustDocs, model: editor.ITextModel, position: Position): TMatchedFaustDoc => {\n    const line$ = position.lineNumber;\n    const line = model.getLineContent(line$);\n    const wordAtPosition = model.getWordAtPosition(position);\n    if (!wordAtPosition) return null;\n    let column$ = wordAtPosition.startColumn - 1;\n    const name = wordAtPosition.word;\n    const prefixes: string[] = [];\n    while (column$ - 2 >= 0 && line[column$ - 1] === \".\") {\n        column$ -= 2;\n        const prefixWord = model.getWordAtPosition(new Position(line$, column$));\n        prefixes.splice(0, 0, prefixWord.word);\n        column$ = prefixWord.startColumn - 1;\n    }\n    const nameArray = [...prefixes, name];\n    while (nameArray.length) {\n        const name = nameArray.join(\".\");\n        const e = doc[name];\n        if (e) {\n            return {\n                nameArray,\n                name,\n                range: new Range(line$, column$ + 1, line$, wordAtPosition.endColumn),\n                doc: e\n            };\n        }\n        column$ += nameArray.splice(0, 1)[0].length + 1;\n    }\n    return null;\n};\nexport const getProviders = async (faust: Faust): Promise<FaustLanguageProviders> => {\n    let libDocs: TFaustDocs = {};\n    let primDocs: TFaustDocs = {};\n    try {\n        libDocs = await Faust2Doc.parse(\"stdfaust.lib\", async (fileName: string) => getFile(fileName, faust));\n        primDocs = await Faust2Doc.parse(\"primitives.lib\", async (fileName: string) => getFile(fileName, faust));\n    } catch (e) { console.error(e); } // eslint-disable-line no-empty, no-console\n    const faustLib = Object.keys(libDocs);\n\n    const hoverProvider: languages.HoverProvider = {\n        provideHover: (model, position) => {\n            const matched = matchDocKey({ ...primDocs, ...libDocs }, model, position);\n            if (matched) {\n                const prefix = matched.nameArray.slice();\n                const name = prefix.pop();\n                const doc = matched.doc;\n                return {\n                    range: matched.range,\n                    contents: [\n                        { value: `\\`\\`\\`\\n${prefix.length ? \"(\" + prefix.join(\".\") + \".)\" : \"\"}${name}\\n\\`\\`\\`` },\n                        { value: doc.doc.replace(/#+/g, \"######\") },\n                        { value: prefix.length ? `[Detail...](${faustDocURL}/${docSections[prefix.slice(0, 2)]}/#${prefix.join(\".\")}${doc.name.replace(/[[\\]|]/g, \"\").toLowerCase()})` : \"[Detail...](https://faustdoc.grame.fr/manual/syntax/index.html#faust-syntax)\" }\n                    ]\n                };\n            }\n            return null;\n        }\n    };\n    const tokensProvider: languages.IMonarchLanguage = ({\n        faustKeywords,\n        faustFunctions,\n        faustLib,\n        defaultToken: \"invalid\",\n        tokenPostfix: \".dsp\",\n        faustCompOperators: [\n            \"~\", \",\", \":\", \"<:\", \":>\"\n        ],\n        operators: [\n            \"=\",\n            \"+\", \"-\", \"*\", \"/\", \"%\", \"^\",\n            \"&\", \"|\", \"xor\", \"<<\", \">>\",\n            \">\", \"<\", \"==\", \"<=\", \">=\", \"!=\",\n            \"@\", \"'\"\n        ],\n        // we include these common regular expressions\n        symbols: /[=><!~?:&|+\\-*/^%]+/,\n        // C# style strings\n        escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n        // The main tokenizer for our languages\n        tokenizer: {\n            root: [\n                // identifiers and keywords\n                [/!|_/, \"keyword\"],\n                [/[a-z_$]([\\w.$]*[\\w$])?/, {\n                    cases: {\n                        \"@faustFunctions\": \"faustFunctions\",\n                        \"@faustKeywords\": \"faustKeywords\",\n                        \"@faustLib\": \"faustLib\",\n                        \"@default\": \"identifier\"\n                    }\n                }],\n                [/[A-Z][\\w$]*/, \"type.identifier\"],\n                // whitespace\n                { include: \"@whitespace\" },\n                // delimiters and operators\n                [/[{}()[\\]]/, \"@brackets\"],\n                [/~|,|<:|:>|:/, \"faustCompOperators\"],\n                [/[<>](?!@symbols)/, \"@brackets\"],\n                [/=|\\+|-|\\*|\\/|%|\\^|&|\\||xor|<<|>>|>|<|==|<=|>=|!=|@|'/, {\n                    cases: {\n                        \"@operators\": \"operators\",\n                        \"@default\": \"\"\n                    }\n                }],\n                // numbers\n                [/\\d*\\.\\d+([eE][-+]?\\d+)?/, \"number.float\"],\n                [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n                [/\\d+/, \"number\"],\n                // delimiter: after number because of .\\d floats\n                [/[;.]/, \"delimiter\"],\n                // strings\n                [/\"/, { token: \"string\", next: \"@string\" }]\n            ],\n            comment: [\n                [/[^/*]+/, \"comment\"],\n                [/\\/\\*/, \"comment\", \"@push\"],\n                [/\\*\\//, \"comment\", \"@pop\"],\n                [/[/*]/, \"comment\"]\n            ],\n            string: [\n                [/[^\\\\\"$]+/, \"string\"],\n                [/@escapes/, \"string.escape\"],\n                [/\\\\./, \"string.escape.invalid\"],\n                [/\"/, \"string\", \"@pop\"]\n            ],\n            whitespace: [\n                [/[ \\t\\r\\n]+/, \"white\"],\n                [/\\/\\*/, \"comment\", \"@comment\"],\n                [/\\/\\/.*$/, \"comment\"]\n            ]\n        }\n    } as any);\n    const completionItemProvider: languages.CompletionItemProvider = {\n        provideCompletionItems: () => {\n            const suggestions: languages.CompletionItem[] = [];\n            [...faustKeywords, ...faustFunctions, ...faustLib].forEach((e) => {\n                suggestions.push({\n                    label: e,\n                    kind: languages.CompletionItemKind.Text,\n                    insertText: e,\n                    range: null\n                });\n            });\n            return { suggestions };\n        }\n    };\n    return { hoverProvider, tokensProvider, completionItemProvider, docs: libDocs };\n};\n"],"sourceRoot":""}